{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":";;;AAAA,+BAAgD;AAChD,uCAA8E;AAE9E;;GAEG;AACH,MAAM,UAAU,GAAG,GAAG,EAAE;IACtB,MAAM,IAAI,GAAG,IAAI,eAAI,CAAC,IAAA,WAAI,EAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC,CAAC;IAChE,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;IAElC,MAAM,QAAQ,GAAG,eAAI,CAAC,iBAAiB,CAAC;QACtC;YACE,KAAK,EAAE,MAAM;YACb,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE,GAAG,EAAE,CAAC,cAAG,CAAC,IAAI,EAAE;SACxB;KACF,CAAC,CAAC;IAEH,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;QACpB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;QAC1B,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF;;GAEG;AACI,MAAM,SAAS,GAAG,GAAG,EAAE;IAC5B,UAAU,EAAE,CAAC;AACf,CAAC,CAAC;AAFW,QAAA,SAAS,aAEpB;AAEF;;;;;;;;GAQG;AACI,MAAM,2BAA2B,GAAG,CACzC,OAAwB,EACxB,QAA8C,EAC9C,EAAE;IACF,MAAM,OAAO,GAAG,IAAA,cAAO,EAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAE1C,mCAAmC;IACnC,MAAM,QAAQ,GAAG,IAAA,gBAAS,EACxB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACxD,CAAC;IAEF,IAAI,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;QAChC,OAAO,QAAQ,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;KACrC;IAED,6DAA6D;IAC7D,OAAO,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;AAClC,CAAC,CAAC;AAjBW,QAAA,2BAA2B,+BAiBtC","sourcesContent":["import { join, resolve, normalize } from 'path';\nimport { app, Tray, Menu, ProtocolRequest, ProtocolResponse } from 'electron';\n\n/**\n * Create a tray menu for the Electron app.\n */\nconst createTray = () => {\n  const tray = new Tray(join(__dirname, './assets/icon-16x.png'));\n  tray.setToolTip('MetaMask Snaps');\n\n  const trayMenu = Menu.buildFromTemplate([\n    {\n      label: 'Quit',\n      role: 'quit',\n      click: () => app.quit(),\n    },\n  ]);\n\n  tray.on('click', () => {\n    tray.popUpContextMenu(trayMenu);\n  });\n\n  tray.on('right-click', () => {\n    tray.popUpContextMenu(trayMenu);\n  });\n};\n\n/**\n * Bootstrap the application.\n */\nexport const bootstrap = () => {\n  createTray();\n};\n\n/**\n * Handles a file protocol request. It checks if the requested file is from the\n * app directory and if so, returns the file. Otherwise, it returns an access\n * denied error.\n *\n * @param request - The protocol request.\n * @param callback - The callback to call with the response.\n * @returns Nothing.\n */\nexport const handleInterceptFileProtocol = (\n  request: ProtocolRequest,\n  callback: (response: ProtocolResponse) => void,\n) => {\n  const appPath = resolve(__dirname, '../');\n\n  // Remove an extra slash on Windows\n  const filePath = normalize(\n    request.url.slice(process.platform === 'win32' ? 8 : 7),\n  );\n\n  if (filePath.startsWith(appPath)) {\n    return callback({ path: filePath });\n  }\n\n  // If the file is not from the app, reply with access denied.\n  return callback({ error: -10 });\n};\n"]}