{"version":3,"file":"encryption.js","sourceRoot":"","sources":["../src/encryption.ts"],"names":[],"mappings":";;;AAAA,qCAIiB;AAcjB;;;;;GAKG;AACI,MAAM,sBAAsB,GAAG,GAAY,EAAE;IAClD,MAAM,UAAU,GAAG,IAAI,oBAAU,EAAE,CAAC;IACpC,MAAM,EAAE,SAAS,EAAE,GAAG,UAAU,CAAC;IAEjC,OAAO,EAAE,UAAU,EAAE,UAAU,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,SAAS,CAAC,KAAK,EAAE,EAAE,CAAC;AAC1E,CAAC,CAAC;AALW,QAAA,sBAAsB,0BAKjC;AAEF;;;;;;;;;;;GAWG;AACI,MAAM,OAAO,GAAG,CAAC,IAAY,EAAE,cAAsB,EAAU,EAAE;IACtE,OAAO,IAAA,iBAAY,EAAC,cAAc,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,CACrE,KAAK,CACN,CAAC;AACJ,CAAC,CAAC;AAJW,QAAA,OAAO,WAIlB;AAEF;;;;;;;;;;;GAWG;AACI,MAAM,OAAO,GAAG,CAAC,IAAY,EAAE,UAAkB,EAAU,EAAE;IAClE,OAAO,IAAA,iBAAY,EAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC7E,CAAC,CAAC;AAFW,QAAA,OAAO,WAElB","sourcesContent":["import {\n  PrivateKey,\n  encrypt as eciesEncrypt,\n  decrypt as eciesDecrypt,\n} from 'eciesjs';\n\n/**\n * A key pair consisting of a private key (secret key) and public key to use for\n * encryption and decryption.\n *\n * @property publicKey - The uncompressed public key as hexadecimal string.\n * @property privateKey - The private key as hexadecimal string.\n */\nexport interface KeyPair {\n  publicKey: string;\n  privateKey: string;\n}\n\n/**\n * Generate a random key pair for usage with the ECIES algorithm.\n *\n * @returns A key pair consisting of a private key and a public key, as a\n * hexadecimal string.\n */\nexport const createHandshakeKeyPair = (): KeyPair => {\n  const privateKey = new PrivateKey();\n  const { publicKey } = privateKey;\n\n  return { privateKey: privateKey.toHex(), publicKey: publicKey.toHex() };\n};\n\n/**\n * Encrypt a message with the receiver's public key. The message is encrypted\n * with the ECIES algorithm.\n *\n * Under the hood, ECIES performs a Diffie-Hellman key exchange and uses the\n * resulting shared secret to encrypt the message.\n *\n * @see https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme\n * @param data - The message to encrypt.\n * @param otherPublicKey - The receiver's public key.\n * @returns The encrypted message as a hexadecimal string.\n */\nexport const encrypt = (data: string, otherPublicKey: string): string => {\n  return eciesEncrypt(otherPublicKey, Buffer.from(data, 'utf8')).toString(\n    'hex',\n  );\n};\n\n/**\n * Decrypt an encrypted message with a private key. The message is decrypted\n * with the ECIES algorithm.\n *\n * Under the hood, ECIES performs a Diffie-Hellman key exchange and uses the\n * resulting shared secret to decrypt the message.\n *\n * @see https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme\n * @param data - The encrypted message.\n * @param privateKey - The private key to use for decryption.\n * @returns The decrypted message as a string.\n */\nexport const decrypt = (data: string, privateKey: string): string => {\n  return eciesDecrypt(privateKey, Buffer.from(data, 'hex')).toString('utf8');\n};\n"]}