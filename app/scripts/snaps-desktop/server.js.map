{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":";AAAA,sCAAsC;;;AAEtC,2BAAqC;AACrC,qCAA4E;AAQ5E;;;;;;;;GAQG;AACI,MAAM,qBAAqB,GAAG,CAAC,EACpC,IAAI,GAAG,WAAW,EAClB,IAAI,GAAG,IAAI,EACX,QAAQ,GACqB,EAAE,EAAE;IACjC,MAAM,MAAM,GAAG,IAAI,oBAAe,CAAC;QACjC,IAAI;QACJ,IAAI;KACL,CAAC,CAAC;IACH,IAAI,MAAM,GAA2B,IAAI,CAAC;IAE1C,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,MAAM,EAAE,EAAE;QACjC,wDAAwD;QACxD,MAAM,GAAG,IAAA,8BAAqB,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC;AAC7C,CAAC,CAAC;AAjBW,QAAA,qBAAqB,yBAiBhC","sourcesContent":["/* eslint-disable consistent-return */\n\nimport { WebSocketServer } from 'ws';\nimport { createWebSocketClient, Handlers, WebSocketClient } from './client';\n\ninterface CreateWebSocketServerOptions {\n  host?: string;\n  port?: number;\n  handlers: Handlers;\n}\n\n/**\n * Create a new WebSocket server to handle (encrypted) JSON-RPC requests.\n *\n * @param options - The server options.\n * @param options.host - The host to bind the server to.\n * @param options.port - The port to bind the server to.\n * @param options.handlers - The handlers to run for specific RPC methods.\n * @returns An instance of the WebSocket server and the underlying client.\n */\nexport const createWebSocketServer = ({\n  host = 'localhost',\n  port = 8000,\n  handlers,\n}: CreateWebSocketServerOptions) => {\n  const server = new WebSocketServer({\n    host,\n    port,\n  });\n  let client: WebSocketClient | null = null;\n\n  server.on('connection', (socket) => {\n    // TODO: Figure out what to do with multiple connections\n    client = createWebSocketClient(socket, handlers);\n  });\n\n  return { server, getClient: () => client };\n};\n"]}