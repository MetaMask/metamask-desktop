{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":";AAAA,sCAAsC;;;AAEtC,2BAAqC;AACrC,2CAA0C;AAC1C,qCAA2D;AAE3D;;;;;GAKG;AACI,MAAM,qBAAqB,GAAG,CAAC,QAAkB,EAAE,EAAE;IAC1D,MAAM,MAAM,GAAG,IAAI,oBAAe,CAAC;QACjC,IAAI,EAAE,WAAW;QACjB,IAAI,EAAE,uBAAW;KAClB,CAAC,CAAC;IACH,IAAI,MAAM,GAAoD,IAAI,CAAC;IAEnE,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,MAAM,EAAE,EAAE;QACjC,wDAAwD;QACxD,MAAM,GAAG,IAAA,8BAAqB,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC;AAC7C,CAAC,CAAC;AAbW,QAAA,qBAAqB,yBAahC","sourcesContent":["/* eslint-disable consistent-return */\n\nimport { WebSocketServer } from 'ws';\nimport { SERVER_PORT } from './constants';\nimport { createWebSocketClient, Handlers } from './client';\n\n/**\n * Create a new WebSocket server to handle (encrypted) JSON-RPC requests.\n *\n * @param handlers - Handlers to run for specific RPC methods.\n * @returns An instance of the WebSocket server and the underlying client.\n */\nexport const createWebSocketServer = (handlers: Handlers) => {\n  const server = new WebSocketServer({\n    host: 'localhost',\n    port: SERVER_PORT,\n  });\n  let client: ReturnType<typeof createWebSocketClient> | null = null;\n\n  server.on('connection', (socket) => {\n    // TODO: Figure out what to do with multiple connections\n    client = createWebSocketClient(socket, handlers);\n  });\n\n  return { server, getClient: () => client };\n};\n"]}