{"version":3,"file":"controllers.js","sourceRoot":"","sources":["../src/controllers.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Duplex } from 'stream';\nimport {\n  AllowedActions,\n  AllowedEvents,\n  AppKeyType,\n  NodeThreadExecutionService,\n  SnapController,\n  SnapControllerActions,\n  SnapControllerEvents,\n} from '@metamask/snap-controllers';\nimport { satisfies as satisfiesSemver } from 'semver';\nimport { createWebSocketServer } from './server';\nimport { ProxyableControllerMessenger } from './ProxyableControllerMessenger';\n\nconst initState = { SnapController: undefined }; // TODO: LOAD\n\nexport interface GetAppKeyAction {\n  type: `MetaMaskController:getAppKey`;\n  handler: (subject: string, appKeyType: AppKeyType) => string;\n}\n\nexport interface CloseAllConnectionsAction {\n  type: `MetaMaskController:closeAllConnections`;\n  handler: (origin: string) => void;\n}\n\ntype MetaMaskControllerActions = GetAppKeyAction | CloseAllConnectionsAction;\n\nconst proxyableActions = [\n  `PermissionController:getEndowments` as const,\n  `PermissionController:getPermissions` as const,\n  `PermissionController:hasPermission` as const,\n  `PermissionController:hasPermissions` as const,\n  `PermissionController:requestPermissions` as const,\n  `PermissionController:revokeAllPermissions` as const,\n  `PermissionController:revokePermissionForAllSubjects` as const,\n  'MetaMaskController:closeAllConnections' as const,\n  'MetaMaskController:getAppKey' as const,\n];\n\n// TODO: Proxy requests to ControllerMessenger that are meant for controllers present in the extension\nconst controllerMessenger = new ProxyableControllerMessenger<\n  MetaMaskControllerActions | SnapControllerActions | AllowedActions,\n  SnapControllerEvents | AllowedEvents\n>(async (request) => {\n  const client = getClient();\n  if (!client) {\n    throw new Error('No client available!');\n  }\n  return client.requestEncrypted(request);\n}, proxyableActions);\n\nconst { getClient } = createWebSocketServer({\n  // @ts-expect-error TODO: Fix types\n  'ControllerMessenger:proxyCall': controllerMessenger.handleProxyCall.bind(controllerMessenger),\n  // @ts-expect-error TODO: Fix types\n  'ControllerMessenger:proxyEvent': controllerMessenger.handleProxyEvent.bind(controllerMessenger),\n});\n\nconst snapControllerMessenger = controllerMessenger.getRestricted<\n  'SnapController',\n  SnapControllerActions['type'] | AllowedActions['type'],\n  SnapControllerEvents['type'] | AllowedEvents['type']\n>({\n  name: 'SnapController',\n  allowedEvents: [\n    'ExecutionService:unhandledError',\n    'ExecutionService:outboundRequest',\n    'ExecutionService:outboundResponse',\n  ],\n  allowedActions: [\n    `PermissionController:getEndowments`,\n    `PermissionController:getPermissions`,\n    `PermissionController:hasPermission`,\n    `PermissionController:hasPermissions`,\n    `PermissionController:requestPermissions`,\n    `PermissionController:revokeAllPermissions`,\n    `PermissionController:revokePermissionForAllSubjects`,\n    'ExecutionService:executeSnap',\n    'ExecutionService:getRpcRequestHandler',\n    'ExecutionService:terminateSnap',\n    'ExecutionService:terminateAllSnaps',\n  ],\n});\n\nconst SNAP_BLOCKLIST = [\n  {\n    id: 'npm:@consensys/starknet-snap',\n    versionRange: '<0.1.11',\n    reason: undefined,\n    infoUrl: undefined,\n  },\n];\n\nconst closeAllConnections = (origin: string) => {\n  // TODO: Proxy?\n  // TODO: Register in MetaMaskController somehow\n  return controllerMessenger.call(\n    'MetaMaskController:closeAllConnections',\n    origin,\n  );\n};\n\nconst getAppKey = async (subject: string, appKeyType: AppKeyType) => {\n  // TODO: Proxy\n  // Prefix subject with appKeyType to generate separate keys for separate uses\n  return controllerMessenger.call(\n    'MetaMaskController:getAppKey',\n    subject,\n    appKeyType,\n  );\n};\n\nconst snapController = new SnapController({\n  environmentEndowmentPermissions: [\n    'endowment:network-access',\n    'endowment:long-running',\n  ],\n  closeAllConnections,\n  getAppKey,\n  checkBlockList: async (snapsToCheck) => {\n    return Object.entries(snapsToCheck).reduce((acc, [snapId, snapVersion]) => {\n      const blockInfo = SNAP_BLOCKLIST.find(\n        (blocked) =>\n          blocked.id === snapId &&\n          satisfiesSemver(snapVersion, blocked.versionRange, {\n            includePrerelease: true,\n          }),\n      );\n\n      const cur = blockInfo\n        ? {\n          blocked: true,\n          reason: blockInfo.reason,\n          infoUrl: blockInfo.infoUrl,\n        }\n        : { blocked: false };\n      return { ...acc, [snapId]: cur };\n    }, {});\n  },\n  state: initState.SnapController,\n  messenger: snapControllerMessenger,\n  featureFlags: {},\n});\n\nconst setupSnapProvider = (_snapId: string, _stream: Duplex) => {\n  // TODO: proxy stream towards extension\n};\n\nconst executionEnvironment = new NodeThreadExecutionService({\n  messenger: controllerMessenger.getRestricted({\n    name: 'ExecutionService',\n  }),\n  setupSnapProvider,\n});\n"]}