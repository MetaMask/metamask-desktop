{"version":3,"file":"json.js","sourceRoot":"","sources":["../../src/utils/json.ts"],"names":[],"mappings":";;;AAGA;;;;;;;GAOG;AACI,MAAM,aAAa,GAAG,CAC3B,KAAa,EACgB,EAAE;IAC/B,IAAI;QACF,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;KAClC;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KACtB;AACH,CAAC,CAAC;AARW,QAAA,aAAa,iBAQxB;AAEF;;;;;;;GAOG;AACI,MAAM,iBAAiB,GAAG,CAC/B,EAAa,EACb,MAAc,EACd,MAAe,EACS,EAAE,CAAC,CAAC;IAC5B,EAAE;IACF,OAAO,EAAE,KAAK;IACd,MAAM;IACN,MAAM;CACP,CAAC,CAAC;AATU,QAAA,iBAAiB,qBAS3B;AAEH;;;;;;GAMG;AACI,MAAM,kBAAkB,GAAG,CAChC,EAAa,EACb,MAAc,EACW,EAAE,CAAC,CAAC;IAC7B,EAAE;IACF,OAAO,EAAE,KAAK;IACd,MAAM;CACP,CAAC,CAAC;AAPU,QAAA,kBAAkB,sBAO5B;AAEH;;;;;;GAMG;AACI,MAAM,eAAe,GAAG,CAC7B,EAAa,EACb,KAAiC,EACY,EAAE,CAAC,CAAC;IACjD,EAAE;IACF,OAAO,EAAE,KAAK;IACd,KAAK;CACN,CAAC,CAAC;AAPU,QAAA,eAAe,mBAOzB;AAEI,MAAM,iBAAiB,GAAG,CAAC,GAAY,EAAE,EAAE;IAChD,OAAO,CACL,GAAG,KAAK,IAAI;QACZ,GAAG,KAAK,SAAS;QACjB,OAAO,GAAG,KAAK,QAAQ;QACvB,oEAAoE;QACpE,CAAC,QAAQ,IAAI,GAAI,IAAI,OAAO,IAAI,GAAI,CAAC,CACtC,CAAC;AACJ,CAAC,CAAC;AARW,QAAA,iBAAiB,qBAQ5B","sourcesContent":["import { JsonRpcId, JsonRpcRequest, JsonRpcResponse } from '@metamask/utils';\nimport { SerializedEthereumRpcError } from 'eth-rpc-errors/dist/classes';\n\n/**\n * Attempt to parse a value to a JSON object. If the value cannot be parsed,\n * this returns the parsing error as the first element of the tuple. Otherwise,\n * this returns the parsed object as the second element of the tuple.\n *\n * @param value - The value to parse.\n * @returns A tuple containing the parsing error and the parsed object.\n */\nexport const safeJSONParse = <T>(\n  value: string,\n): [null, T] | [unknown, null] => {\n  try {\n    return [null, JSON.parse(value)];\n  } catch (error) {\n    return [error, null];\n  }\n};\n\n/**\n * Get a JSON-RPC request object.\n *\n * @param id - The request ID.\n * @param method - The method name.\n * @param params - The method parameters.\n * @returns The JSON-RPC request object.\n */\nexport const getJsonRpcRequest = <Params = unknown>(\n  id: JsonRpcId,\n  method: string,\n  params?: Params,\n): JsonRpcRequest<Params> => ({\n  id,\n  jsonrpc: '2.0',\n  method,\n  params,\n});\n\n/**\n * Get a JSON-RPC response object.\n *\n * @param id - The ID of the request to reply to.\n * @param result - The JSON-RPC response result.\n * @returns The JSON-RPC response object.\n */\nexport const getJsonRpcResponse = <Result>(\n  id: JsonRpcId,\n  result: Result,\n): JsonRpcResponse<Result> => ({\n  id,\n  jsonrpc: '2.0',\n  result,\n});\n\n/**\n * Get a JSON-RPC response error object.\n *\n * @param id - The ID of the request to reply to.\n * @param error - The JSON-RPC error result.\n * @returns The JSON-RPC response object.\n */\nexport const getJsonRpcError = (\n  id: JsonRpcId,\n  error: SerializedEthereumRpcError,\n): JsonRpcResponse<SerializedEthereumRpcError> => ({\n  id,\n  jsonrpc: '2.0',\n  error,\n});\n\nexport const isJsonRpcResponse = (obj: unknown) => {\n  return (\n    obj !== null &&\n    obj !== undefined &&\n    typeof obj === 'object' &&\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    ('result' in obj! || 'error' in obj!)\n  );\n};\n"]}