{"version":3,"file":"ProxyableControllerMessenger.js","sourceRoot":"","sources":["../src/ProxyableControllerMessenger.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,uDAI+B;AAE/B,oDAA4B;AAC5B,iCAA2C;AAoB3C,MAAa,4BAGX,SAAQ,iCAAkC;IAK1C,YACE,YAAoE,EACpE,gBAAkC;QAElC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC3C,CAAC;IAED,IAAI,CACF,UAAa,EACb,GAAG,MAA0C;QAE7C,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YAC9C,mDAAmD;YACnD,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,GAAG,MAAM,CAAC,CAAC;SAChD;QAED,OAAO,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,MAAM,CAAC,CAAC;IAC3C,CAAC;IAEa,WAAW,CACvB,UAAa,EACb,GAAG,CAAqC;;YAExC,+CAA+C;YAC/C,MAAM,EAAE,GAAG,IAAA,gBAAM,GAAE,CAAC;YACpB,mDAAmD;YACnD,OAAO,IAAI,CAAC,YAAY,CACtB,IAAA,wBAAiB,EAAC,EAAE,EAAE,+BAA+B,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CACxE,CAAC;QACJ,CAAC;KAAA;IAED,OAAO,CACL,SAAY,EACZ,GAAG,OAAsC;QAEzC,6CAA6C;QAC7C,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,GAAG,OAAO,CAAC,CAAC;QAC/C,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,OAAO,CAAC,CAAC;IACvC,CAAC;IAEO,kBAAkB,CACxB,SAAY,EACZ,GAAG,OAAsC;QAEzC,MAAM,EAAE,GAAG,IAAA,gBAAM,GAAE,CAAC;QACpB,IAAI,CAAC,YAAY,CACf,IAAA,wBAAiB,EAAC,EAAE,EAAE,gCAAgC,EAAE;YACtD,SAAS;YACT,OAAO;SACR,CAAC,CACH,CAAC;IACJ,CAAC;IAED,wCAAwC;IACxC,gBAAgB,CAAC,OAAmD;QAClE,oEAAoE;QACpE,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,MAAO,CAAC;QAC7C,0BAA0B;QAC1B,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,GAAI,OAAe,CAAC,CAAC;IAChD,CAAC;IAED,uCAAuC;IACvC,eAAe,CAAC,OAAoD;QAClE,oEAAoE;QACpE,MAAM,CAAC,UAAU,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,MAAO,CAAC;QAC9C,0BAA0B;QAC1B,OAAO,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,GAAI,OAAe,CAAC,CAAC;IACrD,CAAC;CACF;AA9ED,oEA8EC","sourcesContent":["import {\n  ActionConstraint,\n  ControllerMessenger,\n  EventConstraint,\n} from '@metamask/controllers';\nimport { JsonRpcRequest } from '@metamask/utils';\nimport nanoid from 'nanoid';\nimport { getJsonRpcRequest } from './json';\n\n// Borrowed from https://github.com/MetaMask/controllers/blob/main/src/ControllerMessenger.ts\ntype ExtractActionParameters<Action, T> = Action extends {\n  type: T;\n  handler: (...args: infer H) => any;\n}\n  ? H\n  : never;\ntype ExtractActionResponse<Action, T> = Action extends {\n  type: T;\n  handler: (...args: any) => infer H;\n}\n  ? H\n  : never;\n\ntype ExtractEventPayload<Event, T> = Event extends { type: T; payload: infer P }\n  ? P\n  : never;\n\nexport class ProxyableControllerMessenger<\n  Action extends ActionConstraint,\n  Event extends EventConstraint\n> extends ControllerMessenger<Action, Event> {\n  private proxyHandler: (request: JsonRpcRequest<unknown>) => Promise<unknown>;\n\n  private proxyableActions: Action['type'][];\n\n  constructor(\n    proxyHandler: (request: JsonRpcRequest<unknown>) => Promise<unknown>,\n    proxyableActions: Action['type'][],\n  ) {\n    super();\n    this.proxyHandler = proxyHandler;\n    this.proxyableActions = proxyableActions;\n  }\n\n  call<T extends Action['type']>(\n    actionType: T,\n    ...params: ExtractActionParameters<Action, T>\n  ): ExtractActionResponse<Action, T> {\n    if (this.proxyableActions.includes(actionType)) {\n      // @ts-expect-error Result type should be a promise\n      return this.proxiedCall(actionType, ...params);\n    }\n\n    return super.call(actionType, ...params);\n  }\n\n  private async proxiedCall<T extends Action['type']>(\n    actionType: T,\n    ...p: ExtractActionParameters<Action, T>\n  ): Promise<ExtractActionResponse<Action, T>> {\n    // Guaranteed to be defined in proxyableActions\n    const id = nanoid();\n    // @ts-expect-error Result type should be a promise\n    return this.proxyHandler(\n      getJsonRpcRequest(id, 'ControllerMessenger:proxyCall', [actionType, p]),\n    );\n  }\n\n  publish<E extends Event['type']>(\n    eventType: E,\n    ...payload: ExtractEventPayload<Event, E>\n  ) {\n    // Always publish events across proxy for now\n    this.handleProxyPublish(eventType, ...payload);\n    super.publish(eventType, ...payload);\n  }\n\n  private handleProxyPublish<E extends Event['type']>(\n    eventType: E,\n    ...payload: ExtractEventPayload<Event, E>\n  ) {\n    const id = nanoid();\n    this.proxyHandler(\n      getJsonRpcRequest(id, 'ControllerMessenger:proxyEvent', [\n        eventType,\n        payload,\n      ]),\n    );\n  }\n\n  // Handles proxy event from other client\n  handleProxyEvent(request: JsonRpcRequest<[Event['type'], unknown[]]>) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const [eventType, payload] = request.params!;\n    // TODO: Validate and type\n    super.publish(eventType, ...(payload as any));\n  }\n\n  // Handles proxy call from other client\n  handleProxyCall(request: JsonRpcRequest<[Action['type'], unknown[]]>) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const [actionType, payload] = request.params!;\n    // TODO: Validate and type\n    return super.call(actionType, ...(payload as any));\n  }\n}\n"]}