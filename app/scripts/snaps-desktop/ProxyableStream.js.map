{"version":3,"file":"ProxyableStream.js","sourceRoot":"","sources":["../src/ProxyableStream.ts"],"names":[],"mappings":"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","sourcesContent":["import { Duplex, PassThrough, Transform } from 'stream';\nimport { JsonRpcRequest } from '@metamask/utils';\nimport { getJsonRpcRequest } from './json';\n\n// TODO: Clean up this code.\nexport class ProxyableStream {\n  private proxyHandler: (request: JsonRpcRequest<unknown>) => Promise<unknown>;\n\n  private streams: Record<string, Duplex>;\n\n  public constructor(\n    proxyHandler: (request: JsonRpcRequest<unknown>) => Promise<unknown>,\n  ) {\n    this.proxyHandler = proxyHandler;\n    this.streams = {};\n  }\n\n  async registerExtension(id: string): Promise<PassThrough> {\n    const passThrough = new Transform({\n      objectMode: true,\n      transform: (chunk, _encoding, callback) => {\n        // Data with this flag comes from another process\n        if ('_proxy' in chunk) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { _proxy, chunk: c } = chunk;\n          callback(null, c);\n          return;\n        }\n\n        this.proxyHandler(\n          getJsonRpcRequest(null, 'ProxyableStream:write', [id, chunk]),\n        )\n          .then(() => callback())\n          .catch((err) => callback(err));\n      },\n    });\n    // TODO: Handle existing stream?\n    this.streams[id] = passThrough;\n    passThrough.on('close', () =>\n      this.handleClose(id).catch((err) => console.error(err)),\n    );\n    await this.handleOpen(id);\n    return passThrough;\n  }\n\n  async registerDesktop(id: string, stream: Duplex) {\n    const incomingPassThrough = new Transform({\n      objectMode: true,\n      transform: (chunk, _encoding, callback) => {\n        // Data with this flag comes from another process\n        if ('_proxy' in chunk) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { _proxy, chunk: c } = chunk;\n          callback(null, c);\n        }\n      },\n    });\n    const outgoingPassThrough = new Transform({\n      objectMode: true,\n      transform: (chunk, _encoding, callback) => {\n        this.proxyHandler(\n          getJsonRpcRequest(null, 'ProxyableStream:write', [id, chunk]),\n        )\n          .then(() => callback(null, chunk))\n          .catch((error) => callback(error));\n      },\n    });\n    // TODO: Handle existing stream?\n    this.streams[id] = incomingPassThrough;\n    stream.on('close', () =>\n      this.handleClose(id).catch((err) => console.error(err)),\n    );\n    await this.handleOpen(id);\n    stream.pipe(outgoingPassThrough);\n    incomingPassThrough.pipe(stream);\n  }\n\n  private handleOpen(id: string) {\n    return this.proxyHandler(\n      getJsonRpcRequest(null, 'ProxyableStream:open', [id]),\n    );\n  }\n\n  private handleClose(id: string) {\n    return this.proxyHandler(\n      getJsonRpcRequest(null, 'ProxyableStream:close', [id]),\n    );\n  }\n\n  handleData(request: JsonRpcRequest<unknown>) {\n    const [id, chunk] = request.params as any[];\n    // Add flag for data that comes from other process\n    this.streams[id].write({ _proxy: true, chunk });\n  }\n}\n"]}