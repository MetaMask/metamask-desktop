diff --git a/dist/command-line-arguments.js b/dist/command-line-arguments.js
index b3df9ed..c6e6161 100644
--- a/dist/command-line-arguments.js
+++ b/dist/command-line-arguments.js
@@ -34,6 +34,16 @@ async function readCommandLineArguments(argv) {
         describe: 'Instructs the tool to bump the second part of the version rather than the first for a backport release.',
         type: 'boolean',
         default: false,
+    })
+        .option('workspace-package', {
+        describe: 'Instructs the tool to only take into account a specific workspace changes',
+        type: 'string',
+        default: '',
+    })
+        .option('tag-name', {
+        describe: 'Instructs the tool also create a release tag alongside the release branch',
+        type: 'string',
+        default: '',
     })
         .help()
         .strict()
diff --git a/dist/initial-parameters.js b/dist/initial-parameters.js
index 65562cd..d8a1b28 100644
--- a/dist/initial-parameters.js
+++ b/dist/initial-parameters.js
@@ -21,15 +21,20 @@ const project_1 = require("./project");
 async function determineInitialParameters({ argv, cwd, stderr, }) {
     const args = await (0, command_line_arguments_1.readCommandLineArguments)(argv);
     const projectDirectoryPath = path_1.default.resolve(cwd, args.projectDirectory);
-    const project = await (0, project_1.readProject)(projectDirectoryPath, { stderr });
+    const workspacePackage = args.workspacePackage;
+    const tagName = args.tagName;
+    const project = await (0, project_1.readProject)(projectDirectoryPath, { stderr }, workspacePackage);
     const tempDirectoryPath = args.tempDirectory === undefined
         ? path_1.default.join(os_1.default.tmpdir(), 'create-release-branch', project.rootPackage.validatedManifest.name.replace('/', '__'))
         : path_1.default.resolve(cwd, args.tempDirectory);
+
     return {
         project,
         tempDirectoryPath,
         reset: args.reset,
         releaseType: args.backport ? 'backport' : 'ordinary',
+        workspacePackage,
+        tagName,
     };
 }
 exports.determineInitialParameters = determineInitialParameters;
diff --git a/dist/main.js b/dist/main.js
index 57e8a77..ed35a97 100644
--- a/dist/main.js
+++ b/dist/main.js
@@ -16,7 +16,7 @@ const monorepo_workflow_operations_1 = require("./monorepo-workflow-operations")
  * @param args.stderr - A stream that can be used to write to standard error.
  */
 async function main({ argv, cwd, stdout, stderr, }) {
-    const { project, tempDirectoryPath, reset, releaseType } = await (0, initial_parameters_1.determineInitialParameters)({ argv, cwd, stderr });
+    const { project, tempDirectoryPath, reset, releaseType, workspacePackage, tagName } = await (0, initial_parameters_1.determineInitialParameters)({ argv, cwd, stderr });
     if (project.isMonorepo) {
         stdout.write('Project appears to have workspaces. Following monorepo workflow.\n');
         await (0, monorepo_workflow_operations_1.followMonorepoWorkflow)({
@@ -26,6 +26,8 @@ async function main({ argv, cwd, stdout, stderr, }) {
             releaseType,
             stdout,
             stderr,
+            workspacePackage,
+            tagName
         });
     }
     else {
diff --git a/dist/monorepo-workflow-operations.js b/dist/monorepo-workflow-operations.js
index a6776a8..46ce019 100644
--- a/dist/monorepo-workflow-operations.js
+++ b/dist/monorepo-workflow-operations.js
@@ -42,7 +42,7 @@ const release_specification_1 = require("./release-specification");
  * @param args.stdout - A stream that can be used to write to standard out.
  * @param args.stderr - A stream that can be used to write to standard error.
  */
-async function followMonorepoWorkflow({ project, tempDirectoryPath, firstRemovingExistingReleaseSpecification, releaseType, stdout, stderr, }) {
+async function followMonorepoWorkflow({ project, tempDirectoryPath, firstRemovingExistingReleaseSpecification, releaseType, stdout, stderr, workspacePackage, tagName, }) {
     const releaseSpecificationPath = path_1.default.join(tempDirectoryPath, 'RELEASE_SPEC');
     if (!firstRemovingExistingReleaseSpecification &&
         (await (0, fs_1.fileExists)(releaseSpecificationPath))) {
@@ -79,6 +79,28 @@ async function followMonorepoWorkflow({ project, tempDirectoryPath, firstRemovin
     });
     await (0, release_plan_1.executeReleasePlan)(project, releasePlan, stderr);
     await (0, fs_1.removeFile)(releaseSpecificationPath);
+
+    // This identifies that we only are creating a release branch for a specific package
+    if (workspacePackage && tagName) {
+        const releasePackage = releasePlan.packages.find(p => {
+          return p.package.directoryPath.endsWith(workspacePackage);
+        });
+
+        if (!releasePackage) {
+          throw new Error('Ups something went wrong. Could not identify package to create tag for');
+        }
+
+        await (0, repo_1.captureChangesInReleaseBranch)(
+            project.directoryPath,
+            {
+                releaseVersion: releasePlan.newVersion,
+            },
+            `${tagName}@${releasePackage.newVersion}`
+        );
+
+        return;
+    }
+
     await (0, repo_1.captureChangesInReleaseBranch)(project.directoryPath, {
         releaseVersion: releasePlan.newVersion,
     });
diff --git a/dist/package-manifest.js b/dist/package-manifest.js
index d7060dc..c54f0c9 100644
--- a/dist/package-manifest.js
+++ b/dist/package-manifest.js
@@ -132,8 +132,13 @@ function isValidPackageManifestWorkspacesField(workspaces) {
  */
 function readPackageManifestWorkspacesField(manifest, parentDirectory) {
     const fieldName = action_utils_1.ManifestFieldNames.Workspaces;
-    const value = manifest[fieldName];
+    let value = manifest[fieldName];
     const schema = schemata[fieldName];
+
+    if(value && value.packages && Array.isArray(value.packages)){
+      value = value.packages;
+    }
+
     if (!schema.validate(value)) {
         throw new Error(buildPackageManifestFieldValidationErrorMessage({
             manifest,
diff --git a/dist/package.js b/dist/package.js
index c862a5b..c7710d3 100644
--- a/dist/package.js
+++ b/dist/package.js
@@ -45,14 +45,15 @@ function generateMonorepoWorkspacePackageReleaseTagName(packageName, packageVers
  * @param args.projectTagNames - The tag names across the whole project.
  * @returns Information about the package.
  */
-async function readMonorepoRootPackage({ packageDirectoryPath, projectDirectoryPath, projectTagNames, }) {
+async function readMonorepoRootPackage({ packageDirectoryPath, projectDirectoryPath, projectTagNames, byPassRootTag }) {
     const manifestPath = path_1.default.join(packageDirectoryPath, MANIFEST_FILE_NAME);
     const changelogPath = path_1.default.join(packageDirectoryPath, CHANGELOG_FILE_NAME);
     const { unvalidated: unvalidatedManifest, validated: validatedManifest } = await (0, package_manifest_1.readPackageManifest)(manifestPath);
     const expectedTagNameForLatestRelease = generateMonorepoRootPackageReleaseTagName(validatedManifest.version.toString());
     const matchingTagNameForLatestRelease = projectTagNames.find((tagName) => tagName === expectedTagNameForLatestRelease);
     if (projectTagNames.length > 0 &&
-        matchingTagNameForLatestRelease === undefined) {
+        matchingTagNameForLatestRelease === undefined &&
+        !byPassRootTag) {
         throw new Error((0, util_1.format)('The package %s has no Git tag for its current version %s (expected %s), so this tool is unable to determine whether it should be included in this release. You will need to create a tag for this package in order to proceed.', validatedManifest.name, validatedManifest.version, `"${expectedTagNameForLatestRelease}"`));
     }
     const hasChangesSinceLatestRelease = matchingTagNameForLatestRelease === undefined
@@ -82,7 +83,10 @@ exports.readMonorepoRootPackage = readMonorepoRootPackage;
  * @param args.stderr - A stream that can be used to write to standard error.
  * @returns Information about the package.
  */
-async function readMonorepoWorkspacePackage({ packageDirectoryPath, rootPackageName, rootPackageVersion, projectDirectoryPath, projectTagNames, stderr, }) {
+async function readMonorepoWorkspacePackage({ packageDirectoryPath, rootPackageName, rootPackageVersion, projectDirectoryPath, projectTagNames, stderr, byPassRootTag }) {
+    if (byPassRootTag) {
+      return await readMonorepoWorkspacePackageNoRootTag({ packageDirectoryPath, projectDirectoryPath, projectTagNames });
+    }
     const manifestPath = path_1.default.join(packageDirectoryPath, MANIFEST_FILE_NAME);
     const changelogPath = path_1.default.join(packageDirectoryPath, CHANGELOG_FILE_NAME);
     const { unvalidated: unvalidatedManifest, validated: validatedManifest } = await (0, package_manifest_1.readPackageManifest)(manifestPath);
@@ -111,6 +115,30 @@ async function readMonorepoWorkspacePackage({ packageDirectoryPath, rootPackageN
         hasChangesSinceLatestRelease,
     };
 }
+
+async function readMonorepoWorkspacePackageNoRootTag({ packageDirectoryPath, projectDirectoryPath, projectTagNames }) {
+  const manifestPath = path_1.default.join(packageDirectoryPath, MANIFEST_FILE_NAME);
+  const changelogPath = path_1.default.join(packageDirectoryPath, CHANGELOG_FILE_NAME);
+  const { unvalidated: unvalidatedManifest, validated: validatedManifest } = await (0, package_manifest_1.readPackageManifest)(manifestPath);
+  const expectedTagNameForWorkspacePackageLatestRelease = generateMonorepoWorkspacePackageReleaseTagName(validatedManifest.name, validatedManifest.version.toString());
+  const matchingTagNameForWorkspacePackageLatestRelease = projectTagNames.find((tagName) => tagName === expectedTagNameForWorkspacePackageLatestRelease);
+
+  if (projectTagNames.length > 0 &&
+    !matchingTagNameForWorkspacePackageLatestRelease) {
+      throw new Error((0, util_1.format)('The current release of workspace package %s, %s, has no corresponding Git tag %s. Hence, this tool is unable to know whether the workspace package changed and should be included in this release. You will need to create tags for both of these packages in order to proceed.', validatedManifest.name, validatedManifest.version, `"${expectedTagNameForWorkspacePackageLatestRelease}"`));
+  }
+
+  const hasChangesSinceLatestRelease = await (0, repo_1.hasChangesInDirectorySinceGitTag)(projectDirectoryPath, packageDirectoryPath, matchingTagNameForWorkspacePackageLatestRelease);
+  return {
+      directoryPath: packageDirectoryPath,
+      manifestPath,
+      validatedManifest,
+      unvalidatedManifest,
+      changelogPath,
+      hasChangesSinceLatestRelease,
+  };
+}
+
 exports.readMonorepoWorkspacePackage = readMonorepoWorkspacePackage;
 /**
  * Updates the changelog file of the given package using
diff --git a/dist/project.js b/dist/project.js
index 6a114e6..9c8b95f 100644
--- a/dist/project.js
+++ b/dist/project.js
@@ -40,21 +40,26 @@ function examineReleaseVersion(packageVersion) {
  * monorepo) or if any of the workspaces specified in the root `package.json` do
  * not have `package.json`s (monorepo only).
  */
-async function readProject(projectDirectoryPath, { stderr }) {
+async function readProject(projectDirectoryPath, { stderr }, workspacePackage) {
     const repositoryUrl = await (0, repo_1.getRepositoryHttpsUrl)(projectDirectoryPath);
     const tagNames = await (0, repo_1.getTagNames)(projectDirectoryPath);
     const rootPackage = await (0, package_1.readMonorepoRootPackage)({
         packageDirectoryPath: projectDirectoryPath,
         projectDirectoryPath,
         projectTagNames: tagNames,
+        byPassRootTag: workspacePackage ? true : false
     });
     const releaseVersion = examineReleaseVersion(rootPackage.validatedManifest.version);
-    const workspaceDirectories = (await Promise.all(rootPackage.validatedManifest[package_manifest_1.PackageManifestFieldNames.Workspaces].map(async (workspacePattern) => {
+    let workspaceDirectories = (await Promise.all(rootPackage.validatedManifest[package_manifest_1.PackageManifestFieldNames.Workspaces].map(async (workspacePattern) => {
         return await promisifiedGlob(workspacePattern, {
             cwd: projectDirectoryPath,
             absolute: true,
         });
     }))).flat();
+
+    if (workspacePackage) {
+      workspaceDirectories = workspaceDirectories.filter(dir => dir.endsWith(workspacePackage))
+    }
     const workspacePackages = (await Promise.all(workspaceDirectories.map(async (directory) => {
         return await (0, package_1.readMonorepoWorkspacePackage)({
             packageDirectoryPath: directory,
@@ -63,6 +68,7 @@ async function readProject(projectDirectoryPath, { stderr }) {
             projectDirectoryPath,
             projectTagNames: tagNames,
             stderr,
+            byPassRootTag: workspacePackage ? true : false
         });
     }))).reduce((obj, pkg) => {
         return Object.assign(Object.assign({}, obj), { [pkg.validatedManifest.name]: pkg });
diff --git a/dist/repo.js b/dist/repo.js
index 0821f9e..88b2885 100644
--- a/dist/repo.js
+++ b/dist/repo.js
@@ -134,10 +134,15 @@ exports.getRepositoryHttpsUrl = getRepositoryHttpsUrl;
  * @param args - The arguments.
  * @param args.releaseVersion - The release version.
  */
-async function captureChangesInReleaseBranch(repositoryDirectoryPath, { releaseVersion }) {
+async function captureChangesInReleaseBranch(repositoryDirectoryPath, { releaseVersion }, tagName) {
+    if (tagName) {
+      await getStdoutFromGitCommandWithin(repositoryDirectoryPath, 'tag', [tagName]);
+    }
+
     await getStdoutFromGitCommandWithin(repositoryDirectoryPath, 'checkout', [
         '-b',
         `release/${releaseVersion}`,
+        ...(tagName ? [tagName] : [])
     ]);
     await getStdoutFromGitCommandWithin(repositoryDirectoryPath, 'add', ['-A']);
     await getStdoutFromGitCommandWithin(repositoryDirectoryPath, 'commit', [
