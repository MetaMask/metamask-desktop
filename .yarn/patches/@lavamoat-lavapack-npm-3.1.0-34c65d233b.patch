diff --git a/src/pack.js b/src/pack.js
index eb41a0af7e2cb84f009486e97c132a0608f17912..3f891eaa2690ef4d4e314d6ca8851becd12afeb3 100644
--- a/src/pack.js
+++ b/src/pack.js
@@ -203,7 +203,9 @@ function createPacker({
     const jsonSerializeableData = {
       // id,
       package: packageName,
-      file,
+      // Omit this absolute filename from bundle so that builds are reproducible between environments
+      // TODO: update lavapack with an option to omit this, and/or make this filepath relative to the current working directory
+      // file,
       // deps,
       // source: sourceMeta.code
     }
diff --git a/src/runtime.js b/src/runtime.js
index 58f76f3..42e2722 100644
--- a/src/runtime.js
+++ b/src/runtime.js
@@ -11221,14 +11221,36 @@ function makePrepareRealmGlobalFromConfig ({ createFunctionWrapper }) {
       return packageCompartment
     }
 
+    function isPackageNameExternal (packageName) {
+      return packageName.startsWith('external:');
+    }
+
     // this gets the lavaMoat config for a module by packageName
     // if there were global defaults (e.g. everything gets "console") they could be applied here
     function getPolicyForPackage (config, packageName) {
+      const isExternal = isPackageNameExternal(packageName);
+
+      if(isExternal) {
+        packageName = packageName.replace(/\\/gu, '/');
+      }
+
       const packageConfig = (config.resources || {})[packageName] || {}
       packageConfig.globals = packageConfig.globals || {}
       packageConfig.packages = packageConfig.packages || {}
       packageConfig.builtin = packageConfig.builtin || {}
-      return packageConfig
+
+      packageConfig.packages = Object.keys(packageConfig.packages).reduce((result, currentPackageName) => {
+        if(!isPackageNameExternal(currentPackageName)) return result;
+
+        const policyValue = result[currentPackageName];
+        const windowsPackageName = currentPackageName.replace(/\//gu, '\\');
+
+        result[windowsPackageName] = policyValue;
+
+        return result;
+      }, packageConfig.packages);
+
+      return packageConfig;
     }
 
     // util for getting the prototype chain as an array
