diff --git a/dist/common/endowments/crypto.js b/dist/common/endowments/crypto.js
index 0c375a91e27a17a1f0def86c2284cf6116c956be..a86016224bd35dd3b817dfafd7108a3ca1458a76 100644
--- a/dist/common/endowments/crypto.js
+++ b/dist/common/endowments/crypto.js
@@ -20,6 +20,9 @@ const createCrypto = () => {
         SubtleCrypto: harden(crypto.subtle.constructor),
     };
 };
+
+exports.createCrypto = createCrypto;
+
 const endowmentModule = {
     names: ['crypto', 'SubtleCrypto'],
     factory: createCrypto,
diff --git a/dist/common/endowments/math.js b/dist/common/endowments/math.js
index 10470f2c5a1a431c490f2f7a999b48c1d54a81e5..f05f6dc7dfc6ac378d8bee5fd76d730406fbc597 100644
--- a/dist/common/endowments/math.js
+++ b/dist/common/endowments/math.js
@@ -1,6 +1,8 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 const globalObject_1 = require("../globalObject");
+const crypto_1 = require("./crypto");
+
 /**
  * Create a {@link Math} object, with the same properties as the global
  * {@link Math} object, but with the {@link Math.random} method replaced.
@@ -18,6 +20,10 @@ function createMath() {
         }
         return Object.assign(Object.assign({}, target), { [key]: globalObject_1.rootRealmGlobal.Math[key] });
     }, {});
+
+    // Since the math endowment requires crypto, we can leverage the crypto endowment factory to get a hardened and platform agnostic instance of webcrypto
+    const hardenedCrypto = crypto_1.createCrypto();
+
     return harden({
         Math: Object.assign(Object.assign({}, math), { random: () => {
                 // NOTE: This is not intended to be a secure replacement for the weak
@@ -36,7 +42,7 @@ function createMath() {
                 //
                 // - https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey
                 // - https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
-                return crypto.getRandomValues(new Uint32Array(1))[0] / 2 ** 32;
+                return hardenedCrypto.crypto.getRandomValues(new Uint32Array(1))[0] / 2 ** 32;
             } }),
     });
 }
diff --git a/dist/webpack/node-thread/bundle.js b/dist/webpack/node-thread/bundle.js
index 512e8e4a761ab216750fe0e25dab131a83bd1245..3decba07e892ecdb2a5f4d476aede97ae8329868 100644
--- a/dist/webpack/node-thread/bundle.js
+++ b/dist/webpack/node-thread/bundle.js
@@ -106009,7 +106009,8 @@ const buildCommonEndowments = () => {
 "use strict";
 __webpack_require__.r(__webpack_exports__);
 /* harmony export */ __webpack_require__.d(__webpack_exports__, {
-/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
+/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
+/* harmony export */   "createCrypto": () => (/* binding */ createCrypto)
 /* harmony export */ });
 /* harmony import */ var _globalObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1299);
 
@@ -106153,6 +106154,7 @@ __webpack_require__.r(__webpack_exports__);
 /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
 /* harmony export */ });
 /* harmony import */ var _globalObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1299);
+/* harmony import */ var _crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1301);
 
 
 /**
@@ -106175,6 +106177,7 @@ function createMath() {
       [key]: _globalObject__WEBPACK_IMPORTED_MODULE_0__.rootRealmGlobal.Math[key]
     };
   }, {});
+  const hardenedCrypto = _crypto__WEBPACK_IMPORTED_MODULE_0__.createCrypto()
   return harden({
     Math: {
       ...math,
@@ -106195,7 +106198,7 @@ function createMath() {
         //
         // - https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey
         // - https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
-        return crypto.getRandomValues(new Uint32Array(1))[0] / 2 ** 32;
+        return hardenedCrypto.crypto.getRandomValues(new Uint32Array(1))[0] / 2 ** 32;
       }
     }
   });
