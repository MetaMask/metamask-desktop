diff --git a/package.json b/package.json
index e0993cd..409ba93 100644
--- a/package.json
+++ b/package.json
@@ -5,7 +5,7 @@
     "lavamoat-run-command": "src/run-command.js"
   },
   "version": "6.4.0",
-  "main": "index.js",
+  "main": "src/index.js",
   "license": "MIT",
   "scripts": {
     "test": "yarn test:prep && yarn test:run",
diff --git a/src/index.js b/src/index.js
index e304f18..0ca114c 100755
--- a/src/index.js
+++ b/src/index.js
@@ -34,6 +34,7 @@ async function runLava (options) {
     scuttleGlobalThisExceptions,
     debugMode,
     statsMode,
+    includeDevDeps
   } = options
   const shouldParseApplication = writeAutoPolicy || writeAutoPolicyDebug || writeAutoPolicyAndRun
   const shouldRunApplication = (!writeAutoPolicy && !writeAutoPolicyDebug) || writeAutoPolicyAndRun
@@ -43,7 +44,7 @@ async function runLava (options) {
     const includeDebugInfo = Boolean(writeAutoPolicyDebug)
     const policyOverride = await loadPolicy({ debugMode, policyPath: policyOverridePath })
     console.warn(`LavaMoat generating policy from entry "${entryId}"...`)
-    const policy = await parseForPolicy({ projectRoot, entryId, policyOverride, includeDebugInfo })
+    const policy = await parseForPolicy({ projectRoot, entryId, policyOverride, includeDebugInfo, includeDevDeps })
     // write policy debug file
     if (includeDebugInfo) {
       fs.mkdirSync(path.dirname(policyDebugPath), { recursive: true })
@@ -60,7 +61,7 @@ async function runLava (options) {
   if (shouldRunApplication) {
     // execution mode
     const lavamoatPolicy = await loadPolicyAndApplyOverrides({ debugMode, policyPath, policyOverridePath })
-    const canonicalNameMap = await loadCanonicalNameMap({ rootDir: projectRoot, includeDevDeps: true })
+    const canonicalNameMap = await loadCanonicalNameMap({ rootDir: projectRoot, includeDevDeps })
     const kernel = createKernel({
       projectRoot,
       lavamoatPolicy,
diff --git a/src/kernel.js b/src/kernel.js
index b65004a..9738208 100644
--- a/src/kernel.js
+++ b/src/kernel.js
@@ -55,6 +55,11 @@ function prepareModuleInitializerArgs (requireRelativeWithContext, moduleObj, mo
 
 function createModuleResolver ({ projectRoot, resolutions, canonicalNameMap }) {
   return function getRelativeModuleId (parentAbsolutePath, requestedName) {
+    // allow lavamoat to resolve electron module
+    if (requestedName === 'electron') {
+      return 'electron'
+    }
+
     // handle resolution overrides
     let parentDir = path.dirname(parentAbsolutePath)
     const parentPackageName = getPackageNameForModulePath(canonicalNameMap, parentDir)
@@ -78,7 +83,7 @@ function createModuleResolver ({ projectRoot, resolutions, canonicalNameMap }) {
 function createModuleLoader ({ canonicalNameMap }) {
   return function loadModuleData (absolutePath) {
     // load builtin modules (eg "fs")
-    if (resolve.isCore(absolutePath)) {
+    if (resolve.isCore(absolutePath) || absolutePath === 'electron') {
       return {
         type: 'builtin',
         file: absolutePath,
diff --git a/src/parseForPolicy.js b/src/parseForPolicy.js
index 286e633..cb4e671 100644
--- a/src/parseForPolicy.js
+++ b/src/parseForPolicy.js
@@ -55,10 +55,10 @@ module.exports = {
   resolutionOmittedExtensions
 }
 
-async function parseForPolicy ({ projectRoot, entryId, policyOverride = {}, rootPackageName, shouldResolve, includeDebugInfo, ...args }) {
+async function parseForPolicy ({ projectRoot, entryId, policyOverride = {}, rootPackageName, shouldResolve, includeDebugInfo, includeDevDeps, ...args }) {
   const isBuiltin = (id) => builtinPackages.includes(id)
   const { resolutions } = policyOverride  
-  const canonicalNameMap = await loadCanonicalNameMap({ rootDir: projectRoot, includeDevDeps: true })
+  const canonicalNameMap = await loadCanonicalNameMap({ rootDir: projectRoot, includeDevDeps })
   const resolveHook = makeResolveHook({ projectRoot, resolutions, rootPackageName, canonicalNameMap })
   const importHook = makeImportHook({ rootPackageName, shouldResolve, isBuiltin, resolveHook, canonicalNameMap })
   const moduleSpecifier = resolveHook(entryId, path.join(projectRoot, `package.json`))
@@ -107,7 +107,7 @@ function makeImportHook ({
 }) {
   return async (specifier) => {
     // see if its a builtin
-    if (isBuiltin(specifier)) {
+    if (isBuiltin(specifier) || specifier.includes('node_modules/electron/index.js')) {
       return makeBuiltinModuleRecord(specifier)
     }
 
diff --git a/src/yargsFlags.js b/src/yargsFlags.js
index 9617ac8..b17a237 100644
--- a/src/yargsFlags.js
+++ b/src/yargsFlags.js
@@ -60,5 +60,12 @@ module.exports = (yargs, defaults) => {
     describe: 'enable writing and logging of stats',
     type: 'boolean',
     default: defaults.statsMode
+  }),
+  // log initialization stats
+  yargs.option('includeDevDeps', {
+    alias: ['includeDevDeps'],
+    describe: 'include dev deps when getting deps canonical name map',
+    type: 'boolean',
+    default: true
   })
 }
