diff --git a/node_modules/eth-keyring-controller/index.js b/node_modules/eth-keyring-controller/index.js
index 4718456..03f3cb7 100644
--- a/node_modules/eth-keyring-controller/index.js
+++ b/node_modules/eth-keyring-controller/index.js
@@ -207,12 +207,11 @@ class KeyringController extends EventEmitter {
    * @param {Object} opts - The constructor options for the keyring.
    * @returns {Promise<Keyring>} The new keyring.
    */
-  addNewKeyring(type, opts) {
-    const Keyring = this.getKeyringClassForType(type);
-    const keyring = new Keyring(opts);
+  async addNewKeyring(type, opts) {
+    const keyring = await this._newKeyring(type, opts);
     if ((!opts || !opts.mnemonic) && type === KEYRINGS_TYPE_MAP.HD_KEYRING) {
       keyring.generateRandomMnemonic();
-      keyring.addAccounts();
+      await keyring.addAccounts();
     }
 
     return keyring
@@ -627,8 +626,7 @@ class KeyringController extends EventEmitter {
   async _restoreKeyring(serialized) {
     const { type, data } = serialized;
 
-    const Keyring = this.getKeyringClassForType(type);
-    const keyring = new Keyring();
+    const keyring = await this._newKeyring(type);
     await keyring.deserialize(data);
     // getAccounts also validates the accounts for some keyrings
     await keyring.getAccounts();
@@ -796,6 +794,18 @@ class KeyringController extends EventEmitter {
       );
     }
   }
+
+  async _newKeyring(type, opts) {
+    const Keyring = this.getKeyringClassForType(type);
+
+    const keyring = new Keyring(opts);
+
+    if (keyring.init) {
+      await keyring.init();
+    }
+
+    return keyring;
+  }
 }
 
 module.exports = KeyringController;
