diff --git a/node_modules/eth-keyring-controller/index.js b/node_modules/eth-keyring-controller/index.js
index 4718456..14b57e0 100644
--- a/node_modules/eth-keyring-controller/index.js
+++ b/node_modules/eth-keyring-controller/index.js
@@ -8,7 +8,7 @@ const { normalize: normalizeAddress } = require('eth-sig-util');
 const SimpleKeyring = require('eth-simple-keyring');
 const HdKeyring = require('@metamask/eth-hd-keyring');
 
-const keyringTypes = [SimpleKeyring, HdKeyring];
+const defaultKeyringBuilders = [keyringBuilderFactory(SimpleKeyring), keyringBuilderFactory(HdKeyring)];
 
 const KEYRINGS_TYPE_MAP = {
   HD_KEYRING: 'HD Key Tree',
@@ -34,13 +34,13 @@ class KeyringController extends EventEmitter {
   constructor(opts) {
     super();
     const initState = opts.initState || {};
-    this.keyringTypes = opts.keyringTypes
-      ? keyringTypes.concat(opts.keyringTypes)
-      : keyringTypes;
+    this.keyringBuilders = opts.keyringBuilders
+      ? defaultKeyringBuilders.concat(opts.keyringBuilders)
+      : defaultKeyringBuilders;
     this.store = new ObservableStore(initState);
     this.memStore = new ObservableStore({
       isUnlocked: false,
-      keyringTypes: this.keyringTypes.map((krt) => krt.type),
+      keyringTypes: this.keyringBuilders.map((krt) => krt.type),
       keyrings: [],
     });
 
@@ -207,12 +207,11 @@ class KeyringController extends EventEmitter {
    * @param {Object} opts - The constructor options for the keyring.
    * @returns {Promise<Keyring>} The new keyring.
    */
-  addNewKeyring(type, opts) {
-    const Keyring = this.getKeyringClassForType(type);
-    const keyring = new Keyring(opts);
+  async addNewKeyring(type, opts) {
+    const keyring = await this._newKeyring(type, opts);
     if ((!opts || !opts.mnemonic) && type === KEYRINGS_TYPE_MAP.HD_KEYRING) {
       keyring.generateRandomMnemonic();
-      keyring.addAccounts();
+      await keyring.addAccounts();
     }
 
     return keyring
@@ -627,9 +626,7 @@ class KeyringController extends EventEmitter {
   async _restoreKeyring(serialized) {
     const { type, data } = serialized;
 
-    const Keyring = this.getKeyringClassForType(type);
-    const keyring = new Keyring();
-    await keyring.deserialize(data);
+    const keyring = await this._newKeyring(type, data);
     // getAccounts also validates the accounts for some keyrings
     await keyring.getAccounts();
     this.keyrings.push(keyring);
@@ -647,8 +644,8 @@ class KeyringController extends EventEmitter {
    * @param {string} type - The type whose class to get.
    * @returns {Keyring|undefined} The class, if it exists.
    */
-  getKeyringClassForType(type) {
-    return this.keyringTypes.find((kr) => kr.type === type);
+  getKeyringBuilderForType(type) {
+    return this.keyringBuilders.find((kr) => kr.type === type);
   }
 
   /**
@@ -796,6 +793,33 @@ class KeyringController extends EventEmitter {
       );
     }
   }
+
+  async _newKeyring(type, opts) {
+    const keyringBuilder = this.getKeyringBuilderForType(type);
+
+    console.log('INSTANTIATING AND INITIALISING KEYRING', type, opts);
+    const keyring = keyringBuilder()
+    
+    await keyring.deserialize(opts);
+    
+    if (keyring.init) {
+      await keyring.init();
+    }
+
+    return keyring;
+  }
+}
+
+function keyringBuilderFactory(KeyringClass, BridgeClass) {
+  const builder = () => {
+    const constructorDependencies = BridgeClass ? new BridgeClass() : undefined;
+    return new KeyringClass(constructorDependencies);
+  };
+
+  builder.type = KeyringClass.type;
+
+  return builder;
 }
 
 module.exports = KeyringController;
+module.exports.keyringBuilderFactory = keyringBuilderFactory;
